/* Enemies Array.
 * All enemies generated by the Enemies.spawn() method are pushed
 * into this array.
 */
var allDogs = [];

/* Gems Array.
 * All gems generated by the Gems.spawn() method are pushed
 * into this array.
 */
var allGems = [];

/* Pause the game by default to prevent the cat moving around
 * when arrow keys are pressed. Set to false when the start or
 * game over screens are hidden from view.
 */
var paused = true;

// Constants
var constants = {
    // Default canvas text font family
    FONT : '20pt ArcadeClassic',
    // Default canvas text font color
    FONT_COLOR: 'white',
    // Game element height
    ENTITY_HEIGHT : 50,
    // Game element width
    ENTITY_WIDTH : 50,
    // Enemy minimum speed
    MIN_SPEED : 50,
    // Enemy max speed
    MAX_SPEED : 400,
    // Player's start x-position on the canvas
    PLAYER_START_X : 300,
    // Player's start y-position on the canvas
    PLAYER_START_Y : 520,
    // Player movement distance
    PLAYER_MOVEMENT : 50,
    // X position array for game elements 
    POSITION_X : [0, 100, 200, 300, 400, 500, 600],
    // Y position array for game elements
    POSITION_Y : [160, 230, 310, 390],
    // Left canvas boundary
    LEFT_BOUNDARY : 0,
    // Top canvas boundary
    TOP_BOUNDARY : 20,
    // Right canvas boundary
    RIGHT_BOUNDARY : 600,
    // Bottom canvas boundary
    BOTTOM_BOUNDARY : 520
};

$(document).ready(function() {

    // Play background music
    gameMusic.play();
    // Adjust background music volume
    gameMusic.volume(0.3);

    // Hide the start screen on button click
    $("#home").click(function() { 

        // Hide the start screen
        $("#startScreen").fadeIn('fast');

        // Adjust background music volume
        gameMusic.volume(0.3);
        /* Unpause the game to allow the player to move around
         * when arrow keys are pressed
         */     
        paused = true;

        enableCharacterSelection();
    });

    // Hide the start screen on button click
    $("#playGame").click(function() { 

        // Hide the start screen
        $("#startScreen").fadeOut('fast');
        
        // Play the select sound effect
        gameSelect.play();
        
        // Fade in the game music
        gameMusic.fade(0.3, 0.7, 2000);
        
        /* Unpause the game to allow the player to move around
         * when arrow keys are pressed
         */
        paused = false;
        disableCharacterSelection();
    });

    // Hide the game over screen on button click
    $("#playAgain").click(function() {
        
        // Hide the game over screen
        $("#gameOver").hide();
        
        // Play the select sound effet
        gameSelect.play();
        // Fade in the game music
        gameMusic.fade(0.3, 1.0, 1000);
        /* Unpause the game to allow the player to move around
         * when arrow keys are pressed
         */     
        paused = false;
    });

    // Show the how to play screen on click
    $("#howToOpen").click(function() {
        
        // Play the select sound effect
        gameSelect.play();
        
        // Fade out the game music
        gameMusic.fade(0.7, 0.3, 2000);
        $("#howTo").fadeIn('fast');
    });

    // Hide the how to play screen on click
    $("#howToClose").click(function() {
        
        // Play the select sound effect
        gameSelect.play();
        
        // Fade in the game music
        gameMusic.fade(0.3, 0.7, 2000);
        $("#howTo").fadeOut('fast');
    });

    // Toggle game music
    $(".toggle-music").click(function() {
        if($(this).hasClass('on')) {
            gameMusic.pause();
            $(this).hide();
            $(".toggle-music.off").show();
        } 
        
        if($(this).hasClass('off')) {
            gameMusic.play();
            $(this).hide();
            $(".toggle-music.on").show();
        }
    });

});


/* Dog Class
 * Accept two arguments. The y position on the canvas and the speed.
 */
var Dog = function(positionY, speed) {

    // Set the dog's image
    this.sprite = 'images/dog.png';
    // Set a random x position on the canvas
    this.x = getRandomInt(-1000, -100);
    // Set the y position. Determined by the positionY argument
    this.y = positionY;
    // Set the dog's height
    this.height = constants.ENTITY_HEIGHT;
    // Set the dog's width
    this.width = constants.ENTITY_WIDTH;
    // Set the dog's speed. Determined by the speed argument
    this.speed = speed;
};

// Update the dog's position, required method for game
// Parameter: dt, a time delta between ticks
Dog.prototype.update = function(dt) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.
    this.x += this.speed*dt;
    /* If the dog goes off the right most side of the canvas,
     * reset it's position at a random negative postion off
     * the left side of the canvas.
    */
    if (this.x > canvas.width) {
        this.x = getRandomInt(-2000, -100);
    }
};

// Draw the dog on the screen, required method for game
Dog.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

/* Generate Dogs
 * This class is responsible for spawning enemies and
 * removing enemies from the canvas.
 */
var Dogs = function() {
    /* Dogs generated are pushed into this array
     * before being pushed into the global allDogs array
     */
    this.dogsArray = [];
};

/* Spawn Dogs
 * This method accepts an argument to determine the number of
 * enemies to spawn and push into the allDogs array.
 */
Dogs.prototype.spawn = function(number) {

    for(var i = 0; i < number; i++) {
        // set the speed of the enemy.
        var speed = getRandomInt(constants.MIN_SPEED, constants.MAX_SPEED);
        // set the players y position on the canvas.
        var position = getRandomInt(0, 3);
        // Instatiate a new dog object.
        this.dogsArray[allDogs.length] = new Dog(constants.POSITION_Y[position], speed);
        // Push the new dog into the dogs array.
        allDogs.push(this.dogsArray[allDogs.length]);
    }
};

/* Reset Enemies
 * Clear all dogs from the canvas
 */
Dogs.prototype.reset = function() {
    var dogCount = allDogs.length;
    for (var i = 0; i < dogCount; i++) {
        allDogs.splice(i, allDogs.length);
    }
};

// Instantiate a new Dog Object
var dogs = new Dogs();

/* Gem Class
 * This class is responsible for generating, clearing
 * and reseting a collectable gem.
 * Accepts two arguments, the x and y position of the gem.
 */
var Gem = function(positionX, positionY) {
    // Include the blue, green and orange gem images in an array
    var gemArray = ['gem-blue.png', 'gem-green.png', 'gem-orange.png'];
    // Set a random gem image from the gemArray
    this.sprite = 'images/' + gemArray[getRandomInt(0,2)];
    // Set the gem's height
    this.height = constants.ENTITY_HEIGHT;
    // Set the gem's width
    this.width = constants.ENTITY_WIDTH;
    // Set a the x position of the gem
    this.x = positionX;
    // Set a the y position of the gem
    this.y = positionY;
};
/* Draw the Gem on the canvas
 * The gem's x and y positions are determined by random positions
 * generated by from the the POSITION_X and POSITION_Y contstant arrays.
 */

Gem.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

/* Clear Gem
 * Hide the gem by setting its x position to a negative value on the canvas
 */
Gem.prototype.clear = function() {
    this.x = -100;
    // Play gem collect sound effect
    gemCollect.play();
};

/* Reset Gem
 * Reseting the Gem will instantiate a new Gem object and in turn reset
 * it's color and position on the canvas.
 */
Gem.prototype.reset = function() {
    gem = new Gem();
};

// Instantiate a new Gem object
var gem = new Gem();

/* Generate Gems
 * This class is responsible for spawning gems and
 * removing gems from the canvas.
 */
var Gems = function() {
    /* Gems generated are pushed into this array
     * before being pushed into the global allGems array
     */
    this.gemsArray = [];
};

/* Spawn Gems
 * This method accepts an argument to determine the number of 
 * gems to spawn and push into the allGems array.
 */
Gems.prototype.spawn = function(number) {

    for(var i = 0; i < number; i++) {
        // Call the getRandomInt function and set the gems x position on the canvas.
        var positionX = getRandomInt(0, 6);
        // Call the getRandomInt function and set the gems y position on the canvas.
        var positionY = getRandomInt(0, 3);
        // Instatiate a new gem object.
        this.gemsArray[allGems.length] = new Gem(constants.POSITION_X[positionX], constants.POSITION_Y[positionY]);
        // Push the new gem into the allGems array.
        allGems.push(this.gemsArray[allGems.length]);
    }

};

/* Reset Gems
 * Clear all gems from the canvas
 */
Gems.prototype.reset = function() {
    var gemsCount = allGems.length;
    for(i = 0; i < gemsCount; i++) {
        allGems.splice(i, allGems.length);
    }
};

// Instantiate a new Gems object
var gems = new Gems();

/* Player Class
 * This class is responsible for rendering the player, updating the
 * player's position on the canvas and updating the player's lives.
 */

// Now write your own player class
var Cat = function () {
    // body...

    // The image/sprite for our cat, this uses
    // a helper we've provided to easily load images
    // TODO:
    // this.setSprite();
    this.sprite = "images/cat-two.png"

    // Variables applied to each of our instances go here,
    this.x = constants.PLAYER_START_X;
    this.y = constants.PLAYER_START_Y;
    this.height = constants.ENTITY_HEIGHT;
    this.width = constants.ENTITY_WIDTH;
    
    /* Set the cat's default lives.
     * The Cat starts the game with 3 lives
     */
    this.lives = 3;
};

// Set the active cat
Cat.prototype.setSprite = function () {
    // body...
    this.sprite = $('.active').attr('src');
};

// Update cat position on the canvas
Cat.prototype.update = function () {
    // body...
    this.xNow = this.x;
    this.yNow = this.y;
};

// Reset player position
Cat.prototype.reset = function() {
    this.x = constants.PLAYER_START_X;
    this.y = constants.PLAYER_START_Y;
}

// Cat hit called when the cat collides with dog's
Cat.prototype.hit = function() {
    this.x = constants.PLAYER_START_X;
    this.y = constants.PLAYER_START_Y;
    $("#collision").show().fadeOut();
    catHit.play();
}

// Update player lives
Cat.prototype.updateLives = function(action, value) {

    // Add a life
    if (action == "add") {
        this.lives = this.lives + value;
    }

    // Remove a life
    if (action == "remove") {
        this.lives = this.lives - value;
    }

    // Update the lives stats
    stats.updateLives(this.lives);
}

// Draw the cat on the canvas
Cat.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
}

// Handle Input Method to control hero
Cat.prototype.handleInput = function (key) {
    // body...
    
    /* If the left arrow key is pressed and the 
     * cat is within the left boundary of the
     * canvas, allow the cat to go move left.
     */
    if(key === 'left' && this.x != constants.LEFT_BOUNDARY) {
        this.x = this.xNow + -constants.PLAYER_MOVEMENT;
    }

    /* If the up arrow key is pressed and the 
     * cat is within the top boundary of the
     * canvas, allow the cat to move upwards.
     */
    if(key === 'up' && this.y != constants.TOP_BOUNDARY) {
        this.y = this.yNow + -constants.PLAYER_MOVEMENT;
    }

    /* If the right arrow key is pressed and the 
     * cat is within the right boundary of the
     * canvas, allow the cat to move right.
     */
    if(key === 'right' && this.x != constants.RIGHT_BOUNDARY) {
        this.x = this.xNow + constants.PLAYER_MOVEMENT;
    }

    /* If the down arrow key is pressed and the 
     * cat is within the bottom boundary of the
     * canvas, allow the cat to move down.
     */
    if(key === 'down' && this.y != constants.BOTTOM_BOUNDARY) {
        this.y = this.yNow + constants.PLAYER_MOVEMENT;
    }
};

// Place the cat object in a variable called cat
var cat = new Cat();

/* Level Class
 * This class is responsible for keeping track of and reseting the level.
 */
var Level = function() {
    this.level = 1;
    dogs.spawn(2);
    gems.spawn(2);
};

/* Update the level: 
 * - increase level
 * - spawn enemies
 * - reset collectable gems
 * - spawn a random amount of collectable gems
 * - reset player position 
 * - update level stat
 * - update the score
 * - play level up sound
 */
Level.prototype.update = function() {
    this.level++;
    // Span enemies when the level is divisable by 2
    if(this.level % 2) {
        dogs.spawn(1);
    }
    gems.reset();
    gems.spawn(getRandomInt(2,4));
    cat.reset();
    stats.updateLevel(this.level);
    stats.updateScore();
    levelUp.play();
};

/* Reset the level:
 * - reset to level 1 
 * - reset player
 * - reset enemies
 * - reset gem
 * - reset stats 
 * - update player lives
 * - spawn enemies
 * - play game over sound
 * - fade out the game music slightly
 * - pause the game to prevent player movement
 * - show game over screen
 */
Level.prototype.reset = function() {
    this.level = 1;
    cat.reset();
    dogs.reset();
    gem.reset();
    stats.reset();
    cat.updateLives('add', 2); 
    dogs.spawn(2);
    gameOver.play();
    gameMusic.fade(1.0, 0.3, 1000);
    paused = true;
    $("#gameOver").show();
};

// Instantiate a new level object
var level = new Level();


/* Stats Class
 * This class is responsible for rendering, updating and reseting the game statisitcs,
 * namely the current level and score.
 */
var Stats = function() {
    this.font = constants.FONT;
    this.fontColor = constants.FONT_COLOR;
    this.currentLevel = level.level;
    this.currentLives = cat.lives;
    this.currentScore = 0;
    this.currentGems = 0;
};

// Render the stat bar, level text, score text, lives count and gems count
Stats.prototype.render = function() {
    ctx.fillStyle = 'rgba(0,0,0,0.5)';
    ctx.fillRect(0,50, 707, 45);
    this.level();
    this.score();
    this.lives();
    this.gems();
};

// Level text
Stats.prototype.level = function() {
    ctx.font = this.font;
    ctx.fillStyle = this.fontColor;
    ctx.textAlign = 'start';
    ctx.fillText('Level '+ this.currentLevel, 10, 82);
};

// Update level
Stats.prototype.updateLevel = function(level) {
    this.currentLevel = level;
};

// Score text
Stats.prototype.score = function() {
    ctx.font = this.font;
    ctx.fillStyle = this.fontColor;
    ctx.textAlign = 'end';
    ctx.fillText(this.currentScore, 700, 82);
};

// Update score stat
Stats.prototype.updateScore = function() {
    this.currentScore = this.currentScore + 600;
};

// Lives icon & text
Stats.prototype.lives = function() {
    ctx.drawImage(Resources.get('images/stat-heart.png'), 430, 62);
    ctx.font = this.font;
    ctx.fontStyle = this.fontColor;
    ctx.textAlign = 'start';
    ctx.fillText('x '+ this.currentLives, 465, 82);
};

// Update lives stat
Stats.prototype.updateLives = function(lives) {
    this.currentLives = lives;
};

// Gems icon & text
Stats.prototype.gems = function() {
    ctx.drawImage(Resources.get('images/stat-gem.png'), 340, 62);
    ctx.font = this.font;
    ctx.fontStyle = this.fontColor;
    ctx.textAlign = 'start';
    ctx.fillText('x '+ this.currentGems, 370, 82);
};

// Update gem stat
Stats.prototype.updateGems = function() {
    this.currentGems++;
    this.currentScore = this.currentScore + 300;
};

// Reset stats
Stats.prototype.reset = function() {
    $("#gameOver #score").html(this.currentScore);
    this.currentScore = 0;
    this.currentGems = 0;
    this.currentLevel = level.level;
};

// Instatiate a new Stats object
var stats = new Stats();

// Helper Functions

// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };

    if (!paused) {
        cat.handleInput(allowedKeys[e.keyCode]);
    }
});

/* Returns a random integer. 
 * Accepts two arguments, a minimum and maximum number.
 */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}

/* Returns a console log.
 * Takes one or more expressions as parameters.
 * Just to make logging to the console that much more simple :)
 */
function log(log) {
     return console.log(log);
}
